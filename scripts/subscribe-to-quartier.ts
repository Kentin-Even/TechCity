import { PrismaClient } from "../lib/generated/prisma";

const prisma = new PrismaClient();

async function subscribeUserToQuartier(
  userEmail: string,
  quartierName?: string
) {
  try {
    console.log(`üîó ABONNEMENT AUX QUARTIERS pour ${userEmail}`);
    console.log("===============================================\n");

    // Trouver l'utilisateur
    const user = await prisma.user.findUnique({
      where: { email: userEmail },
      select: { id: true, name: true, email: true },
    });

    if (!user) {
      console.error(`‚ùå Utilisateur non trouv√©: ${userEmail}`);
      return;
    }

    console.log(
      `üë§ Utilisateur trouv√©: ${user.name || "Sans nom"} (${user.email})`
    );

    // Lister tous les quartiers disponibles
    const quartiers = await prisma.quartier.findMany();
    console.log("\nüèòÔ∏è Quartiers disponibles:");
    quartiers.forEach((q) => {
      console.log(`  ‚Ä¢ ${q.nom} (ID: ${q.idQuartier})`);
    });

    // D√©terminer le quartier √† utiliser
    let quartierCible;
    if (quartierName) {
      quartierCible = quartiers.find((q) =>
        q.nom.toLowerCase().includes(quartierName.toLowerCase())
      );
    } else {
      // Par d√©faut, utiliser le premier quartier (Centre-Ville Tech City)
      quartierCible = quartiers[0];
    }

    if (!quartierCible) {
      console.error(
        `‚ùå Quartier non trouv√©: ${quartierName || "aucun sp√©cifi√©"}`
      );
      return;
    }

    console.log(`\nüéØ Quartier cible: ${quartierCible.nom}`);

    // V√©rifier si l'abonnement existe d√©j√†
    const abonnementExistant = await prisma.abonnementQuartier.findUnique({
      where: {
        idUtilisateur_idQuartier: {
          idUtilisateur: user.id,
          idQuartier: quartierCible.idQuartier,
        },
      },
    });

    if (abonnementExistant) {
      if (abonnementExistant.actif) {
        console.log(
          "‚ÑπÔ∏è L'utilisateur est d√©j√† abonn√© et l'abonnement est actif"
        );
        return;
      } else {
        // R√©activer l'abonnement
        await prisma.abonnementQuartier.update({
          where: {
            idUtilisateur_idQuartier: {
              idUtilisateur: user.id,
              idQuartier: quartierCible.idQuartier,
            },
          },
          data: {
            actif: true,
            dateAbonnement: new Date(),
          },
        });
        console.log("‚úÖ Abonnement r√©activ√© avec succ√®s !");
      }
    } else {
      // Cr√©er un nouvel abonnement
      await prisma.abonnementQuartier.create({
        data: {
          idUtilisateur: user.id,
          idQuartier: quartierCible.idQuartier,
          actif: true,
          dateAbonnement: new Date(),
          typeAlerte: "TOUTES",
        },
      });
      console.log("‚úÖ Nouvel abonnement cr√©√© avec succ√®s !");
    }

    // V√©rifier les abonnements apr√®s modification
    const abonnements = await prisma.abonnementQuartier.findMany({
      where: { idUtilisateur: user.id },
      include: { quartier: true },
    });

    console.log("\nüìã Abonnements actuels de l'utilisateur:");
    abonnements.forEach((abo) => {
      console.log(
        `  ‚Ä¢ ${abo.quartier.nom} - ${abo.actif ? "‚úÖ Actif" : "‚ùå Inactif"}`
      );
    });

    console.log("\nüéâ Maintenant, vous pouvez tester les alertes !");
    console.log(
      "   G√©n√©rez des donn√©es avec: npm run generate-alerts single 2 CRITIQUE"
    );
  } catch (error) {
    console.error("‚ùå Erreur lors de l'abonnement:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Script principal
async function main() {
  const args = process.argv.slice(2);
  const userEmail = args[0];
  const quartierName = args[1];

  if (!userEmail) {
    console.log(`
üîó SCRIPT D'ABONNEMENT AUX QUARTIERS
===================================

Usage: npm run subscribe-quartier <email> [quartier]

Arguments:
  email     - Email de l'utilisateur √† abonner
  quartier  - Nom du quartier (optionnel, par d√©faut le premier)

Exemples:
  npm run subscribe-quartier kentineven@email.com
  npm run subscribe-quartier kentineven@email.com "Centre-Ville"
    `);
    return;
  }

  await subscribeUserToQuartier(userEmail, quartierName);
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
}

export { subscribeUserToQuartier };
