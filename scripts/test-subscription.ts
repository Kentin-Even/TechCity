import { PrismaClient } from "../lib/generated/prisma";

const prisma = new PrismaClient();

async function testSubscriptionSystem() {
  console.log("üß™ Test du syst√®me d'abonnement aux quartiers\n");

  try {
    // 1. R√©cup√©rer les informations de base
    console.log("1Ô∏è‚É£ R√©cup√©ration des quartiers et utilisateurs...");

    const quartiers = await prisma.quartier.findMany({
      select: {
        idQuartier: true,
        nom: true,
        _count: {
          select: {
            capteurs: true,
          },
        },
      },
    });

    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
      },
      take: 3,
    });

    console.log(`   üìç ${quartiers.length} quartiers trouv√©s`);
    console.log(`   üë• ${users.length} utilisateurs trouv√©s`);

    if (quartiers.length === 0 || users.length === 0) {
      console.log("‚ùå Pas assez de donn√©es pour tester");
      return;
    }

    console.log("\n2Ô∏è‚É£ Quartiers disponibles :");
    quartiers.forEach((q) => {
      console.log(
        `   - ${q.nom} (ID: ${q.idQuartier}) - ${q._count.capteurs} capteurs`
      );
    });

    console.log("\n3Ô∏è‚É£ Utilisateurs :");
    users.forEach((u) => {
      console.log(`   - ${u.name || u.email} (ID: ${u.id})`);
    });

    // 2. V√©rifier les abonnements existants
    console.log("\n4Ô∏è‚É£ Abonnements existants :");
    const abonnements = await prisma.abonnementQuartier.findMany({
      include: {
        quartier: { select: { nom: true } },
        utilisateur: { select: { email: true, name: true } },
      },
    });

    if (abonnements.length === 0) {
      console.log("   Aucun abonnement trouv√©");
    } else {
      abonnements.forEach((ab) => {
        const userName = ab.utilisateur.name || ab.utilisateur.email;
        const status = ab.actif ? "‚úÖ Actif" : "‚ùå Inactif";
        console.log(`   - ${userName} ‚Üí ${ab.quartier.nom} (${status})`);
      });
    }

    // 3. Test de cr√©ation d'abonnement
    const testUser = users[0];
    const testQuartier = quartiers[0];

    console.log(
      `\n5Ô∏è‚É£ Test d'abonnement : ${testUser.name || testUser.email} ‚Üí ${
        testQuartier.nom
      }`
    );

    // V√©rifier si l'abonnement existe d√©j√†
    const existingSubscription = await prisma.abonnementQuartier.findUnique({
      where: {
        idUtilisateur_idQuartier: {
          idUtilisateur: testUser.id,
          idQuartier: testQuartier.idQuartier,
        },
      },
    });

    if (existingSubscription) {
      console.log("   üìã Abonnement existant trouv√© :", {
        actif: existingSubscription.actif,
        typeAlerte: existingSubscription.typeAlerte,
        dateAbonnement: existingSubscription.dateAbonnement?.toISOString(),
      });
    } else {
      console.log("   ‚ûï Cr√©ation d'un nouvel abonnement...");

      const newSubscription = await prisma.abonnementQuartier.create({
        data: {
          idUtilisateur: testUser.id,
          idQuartier: testQuartier.idQuartier,
          actif: true,
          dateAbonnement: new Date(),
          typeAlerte: "TOUTES",
        },
      });

      console.log("   ‚úÖ Abonnement cr√©√© avec succ√®s !");
      console.log("   üìã D√©tails :", {
        actif: newSubscription.actif,
        typeAlerte: newSubscription.typeAlerte,
        dateAbonnement: newSubscription.dateAbonnement?.toISOString(),
      });
    }

    // 4. V√©rifier les notifications associ√©es
    console.log("\n6Ô∏è‚É£ Notifications r√©centes pour cet utilisateur :");
    const notifications = await prisma.notification.findMany({
      where: {
        idUtilisateur: testUser.id,
      },
      include: {
        alerte: {
          include: {
            capteur: {
              include: {
                quartier: { select: { nom: true } },
              },
            },
          },
        },
      },
      orderBy: {
        dateEnvoi: "desc",
      },
      take: 5,
    });

    if (notifications.length === 0) {
      console.log("   Aucune notification trouv√©e");
    } else {
      notifications.forEach((notif) => {
        const status = notif.statut === "LU" ? "üìñ Lue" : "üì¨ Non lue";
        const quartierNom = notif.alerte.capteur.quartier.nom;
        console.log(`   - ${status} | ${quartierNom} | ${notif.titre}`);
        const dateStr = notif.dateEnvoi
          ? new Date(notif.dateEnvoi).toLocaleString("fr-FR")
          : "Date inconnue";
        console.log(`     ${dateStr}`);
      });
    }

    console.log("\n‚úÖ Test termin√© avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors du test :", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Lancer le test si ce script est ex√©cut√© directement
if (require.main === module) {
  testSubscriptionSystem();
}

export { testSubscriptionSystem };
