import { PrismaClient } from "../lib/generated/prisma";
import { alertService } from "../lib/alert-service";

const prisma = new PrismaClient();

// Types pour les donn√©es d'alerte
interface AlertTestData {
  idCapteur: number;
  valeur: number;
  unite: string;
  typeCapteur: string;
  niveau: "LEGER" | "MODERE" | "CRITIQUE";
}

// Configuration des seuils d'alerte par type de capteur
const ALERT_THRESHOLDS = {
  "PM2.5": {
    LEGER: 55, // L√©g√®rement au-dessus de la normale (50)
    MODERE: 85, // Mod√©r√© (2x la normale)
    CRITIQUE: 150, // Critique (3x la normale)
    unite: "Œºg/m¬≥",
  },
  CO2: {
    LEGER: 1200, // L√©g√®rement √©lev√© (normal: 400-1000)
    MODERE: 2000, // Mod√©r√©
    CRITIQUE: 3500, // Critique
    unite: "ppm",
  },
  Temperature: {
    LEGER: 32, // Canicule l√©g√®re
    MODERE: 38, // Canicule mod√©r√©e
    CRITIQUE: 45, // Canicule critique
    unite: "¬∞C",
  },
  Humidity: {
    LEGER: 85, // Humidit√© √©lev√©e
    MODERE: 95, // Tr√®s humide
    CRITIQUE: 98, // Extr√™me
    unite: "%",
  },
  Sound: {
    LEGER: 75, // Bruit √©lev√© (normal: 30-65)
    MODERE: 85, // Tr√®s bruyant
    CRITIQUE: 95, // Extr√™mement bruyant
    unite: "dB",
  },
  Traffic: {
    LEGER: 50, // Trafic dense
    MODERE: 80, // Tr√®s dense
    CRITIQUE: 120, // Embouteillage critique
    unite: "vehicles/min",
  },
};

// Mapping des capteurs (bas√© sur le simulateur existant)
const CAPTEUR_MAPPING = {
  1: { type: "PM2.5", nom: "Capteur PM2.5 - Place Centrale" },
  2: { type: "CO2", nom: "Capteur CO2 - Place Centrale" },
  3: { type: "Temperature", nom: "Capteur Temp√©rature - Place Centrale" },
  4: { type: "Humidity", nom: "Capteur Humidit√© - Place Centrale" },
  5: { type: "Sound", nom: "Capteur Son - Place Centrale" },
  6: { type: "Traffic", nom: "Capteur Trafic - Place Centrale" },
};

class AlertDataGenerator {
  private generateUniqueId(): bigint {
    return BigInt(Date.now() * 1000 + Math.floor(Math.random() * 1000));
  }

  private generateAlertValue(
    typeCapteur: string,
    niveau: "LEGER" | "MODERE" | "CRITIQUE"
  ): number {
    const config =
      ALERT_THRESHOLDS[typeCapteur as keyof typeof ALERT_THRESHOLDS];
    if (!config) {
      throw new Error(`Type de capteur non support√©: ${typeCapteur}`);
    }

    const baseValue = config[niveau];
    // Ajouter une variation al√©atoire de ¬±10%
    const variation = baseValue * 0.1 * (Math.random() - 0.5);
    return Number((baseValue + variation).toFixed(2));
  }

  private async saveSensorData(data: AlertTestData): Promise<void> {
    try {
      await prisma.donneeCapteur.create({
        data: {
          idDonnee: this.generateUniqueId(),
          valeur: data.valeur,
          timestamp: new Date(),
          unite: data.unite,
          validee: true,
          idCapteur: data.idCapteur,
        },
      });

      console.log(
        `üìä Donn√©e g√©n√©r√©e - Capteur ${data.idCapteur} (${data.typeCapteur}): ${data.valeur} ${data.unite} [${data.niveau}]`
      );

      // D√©clencher la v√©rification des seuils
      const capteur = await prisma.capteur.findUnique({
        where: { idCapteur: data.idCapteur },
        include: { typeCapteur: true },
      });

      if (capteur) {
        await alertService.verifierSeuilsPersonnalises(
          data.idCapteur,
          data.valeur,
          capteur.idTypeCapteur
        );
        console.log(
          `üö® V√©rification des alertes effectu√©e pour le capteur ${data.idCapteur}`
        );
      }
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de la g√©n√©ration des donn√©es d'alerte:`,
        error
      );
    }
  }

  // G√©n√©rer des donn√©es d'alerte pour un capteur sp√©cifique
  async generateSingleAlert(
    idCapteur: number,
    niveau: "LEGER" | "MODERE" | "CRITIQUE" = "MODERE"
  ): Promise<void> {
    const capteurInfo =
      CAPTEUR_MAPPING[idCapteur as keyof typeof CAPTEUR_MAPPING];
    if (!capteurInfo) {
      console.error(`‚ùå Capteur ${idCapteur} non trouv√© dans la configuration`);
      return;
    }

    const valeur = this.generateAlertValue(capteurInfo.type, niveau);
    const unite =
      ALERT_THRESHOLDS[capteurInfo.type as keyof typeof ALERT_THRESHOLDS].unite;

    await this.saveSensorData({
      idCapteur,
      valeur,
      unite,
      typeCapteur: capteurInfo.type,
      niveau,
    });
  }

  // G√©n√©rer des donn√©es d'alerte pour tous les capteurs
  async generateAllAlerts(
    niveau: "LEGER" | "MODERE" | "CRITIQUE" = "MODERE"
  ): Promise<void> {
    console.log(
      `üöÄ G√©n√©ration d'alertes niveau ${niveau} pour tous les capteurs...`
    );

    const capteurIds = Object.keys(CAPTEUR_MAPPING).map(Number);

    for (const idCapteur of capteurIds) {
      await this.generateSingleAlert(idCapteur, niveau);
      // Attendre un peu entre chaque g√©n√©ration pour √©viter les conflits
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    console.log(`‚úÖ G√©n√©ration termin√©e pour ${capteurIds.length} capteurs`);
  }

  // G√©n√©rer des donn√©es d'alerte pour des capteurs sp√©cifiques
  async generateSelectiveAlerts(
    capteurIds: number[],
    niveau: "LEGER" | "MODERE" | "CRITIQUE" = "MODERE"
  ): Promise<void> {
    console.log(
      `üéØ G√©n√©ration d'alertes niveau ${niveau} pour les capteurs: ${capteurIds.join(
        ", "
      )}`
    );

    for (const idCapteur of capteurIds) {
      await this.generateSingleAlert(idCapteur, niveau);
      await new Promise((resolve) => setTimeout(resolve, 100));
    }

    console.log(
      `‚úÖ G√©n√©ration termin√©e pour ${capteurIds.length} capteurs s√©lectionn√©s`
    );
  }

  // G√©n√©rer un sc√©nario de pollution critique
  async generatePollutionCrisis(): Promise<void> {
    console.log(
      `üî• SIMULATION DE CRISE POLLUTION - G√©n√©ration de donn√©es critiques...`
    );

    // PM2.5 et CO2 en niveau critique
    await this.generateSingleAlert(1, "CRITIQUE"); // PM2.5
    await this.generateSingleAlert(2, "CRITIQUE"); // CO2

    // Temp√©rature √©lev√©e (contribue √† la pollution)
    await this.generateSingleAlert(3, "MODERE"); // Temp√©rature

    // Trafic dense (source de pollution)
    await this.generateSingleAlert(6, "CRITIQUE"); // Trafic

    console.log(`üö® CRISE SIMUL√âE: Pollution critique d√©tect√©e!`);
  }

  // G√©n√©rer un sc√©nario de canicule
  async generateHeatWave(): Promise<void> {
    console.log(
      `üå°Ô∏è SIMULATION CANICULE - G√©n√©ration de donn√©es de chaleur extr√™me...`
    );

    // Temp√©rature critique
    await this.generateSingleAlert(3, "CRITIQUE"); // Temp√©rature

    // Humidit√© tr√®s faible (air sec)
    const config = ALERT_THRESHOLDS["Humidity"];
    await this.saveSensorData({
      idCapteur: 4,
      valeur: 15, // Tr√®s sec
      unite: config.unite,
      typeCapteur: "Humidity",
      niveau: "CRITIQUE",
    });

    console.log(`üî• CANICULE SIMUL√âE: Temp√©ratures extr√™mes d√©tect√©es!`);
  }

  // Afficher la configuration des seuils
  displayThresholds(): void {
    console.log("\nüìã CONFIGURATION DES SEUILS D'ALERTE:");
    console.log("=====================================");

    Object.entries(ALERT_THRESHOLDS).forEach(([type, config]) => {
      console.log(`\n${type} (${config.unite}):`);
      console.log(`  ‚Ä¢ L√©ger:    ${config.LEGER} ${config.unite}`);
      console.log(`  ‚Ä¢ Mod√©r√©:   ${config.MODERE} ${config.unite}`);
      console.log(`  ‚Ä¢ Critique: ${config.CRITIQUE} ${config.unite}`);
    });

    console.log("\nüéØ CAPTEURS DISPONIBLES:");
    console.log("========================");
    Object.entries(CAPTEUR_MAPPING).forEach(([id, info]) => {
      console.log(`  ‚Ä¢ Capteur ${id}: ${info.nom} (${info.type})`);
    });
  }
}

// Script principal
async function main() {
  const generator = new AlertDataGenerator();

  // R√©cup√©rer les arguments de ligne de commande
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    switch (command) {
      case "help":
      case "--help":
      case "-h":
        console.log(`
üö® G√âN√âRATEUR DE DONN√âES D'ALERTE
=================================

Usage: npm run generate-alerts [commande] [options]

Commandes disponibles:
  help                    - Afficher cette aide
  config                  - Afficher la configuration des seuils
  single <id> [niveau]    - G√©n√©rer une alerte pour un capteur (d√©faut: MODERE)
  all [niveau]           - G√©n√©rer des alertes pour tous les capteurs
  select <ids> [niveau]   - G√©n√©rer des alertes pour des capteurs sp√©cifiques
  pollution              - Simuler une crise de pollution
  canicule               - Simuler une canicule

Niveaux d'alerte:
  LEGER    - L√©g√®rement au-dessus des seuils normaux
  MODERE   - Mod√©r√©ment √©lev√© (d√©faut)
  CRITIQUE - Valeurs critiques/dangereuses

Exemples:
  npm run generate-alerts single 1 CRITIQUE
  npm run generate-alerts all MODERE
  npm run generate-alerts select 1,2,3 LEGER
  npm run generate-alerts pollution
        `);
        break;

      case "config":
        generator.displayThresholds();
        break;

      case "single":
        if (!args[1]) {
          console.error("‚ùå ID du capteur requis. Usage: single <id> [niveau]");
          process.exit(1);
        }
        const idCapteur = parseInt(args[1]);
        const niveau = (args[2] as "LEGER" | "MODERE" | "CRITIQUE") || "MODERE";
        await generator.generateSingleAlert(idCapteur, niveau);
        break;

      case "all":
        const niveauAll =
          (args[1] as "LEGER" | "MODERE" | "CRITIQUE") || "MODERE";
        await generator.generateAllAlerts(niveauAll);
        break;

      case "select":
        if (!args[1]) {
          console.error(
            "‚ùå IDs des capteurs requis. Usage: select <ids> [niveau]"
          );
          console.error("   Exemple: select 1,2,3 CRITIQUE");
          process.exit(1);
        }
        const capteurIds = args[1].split(",").map((id) => parseInt(id.trim()));
        const niveauSelect =
          (args[2] as "LEGER" | "MODERE" | "CRITIQUE") || "MODERE";
        await generator.generateSelectiveAlerts(capteurIds, niveauSelect);
        break;

      case "pollution":
        await generator.generatePollutionCrisis();
        break;

      case "canicule":
        await generator.generateHeatWave();
        break;

      default:
        console.log("üö® G√©n√©ration d'alertes de test par d√©faut...");
        await generator.generateAllAlerts("MODERE");
        break;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ex√©cution:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
}

export { AlertDataGenerator };
